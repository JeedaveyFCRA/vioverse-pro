// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// ENUMS
// ==========================================

enum Bureau {
  TU      // TransUnion
  EX      // Experian
  EQ      // Equifax
  UNKNOWN
}

enum Severity {
  extreme
  severe
  serious
  minor
  unknown
}

enum ViolationType {
  Pay_Status_Bankruptcy
  High_Balance
  Remarks_Chapter13
  Account_Status
  Date_Updated
  Account_Included
  Discharge_Status
  Balance_Reporting
  Payment_History
  Collection_Status
  Public_Record
  OTHER
}

enum UserRole {
  USER
  ADMIN
  ANALYST
}

// ==========================================
// MODELS
// ==========================================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  csvSources    CSVSource[]
  pdfFiles      PDFFile[]
  violations    Violation[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model PDFFile {
  id           String      @id @default(uuid())
  filename     String
  originalName String
  bureau       Bureau
  uploadedBy   String
  uploadedAt   DateTime    @default(now())
  processedAt  DateTime?
  pageCount    Int
  fileSize     Int         // in bytes
  storageUrl   String
  checksum     String
  metadata     Json?

  // Relations
  user         User        @relation(fields: [uploadedBy], references: [id])
  violations   Violation[]

  @@index([uploadedBy])
  @@index([bureau])
  @@map("pdf_files")
}

model CSVSource {
  id            String      @id @default(uuid())
  filename      String
  originalName  String
  uploadedBy    String
  uploadedAt    DateTime    @default(now())
  processedAt   DateTime?
  rowCount      Int
  violationCount Int
  bureau        Bureau
  storageUrl    String
  checksum      String
  metadata      Json?

  // Relations
  user          User        @relation(fields: [uploadedBy], references: [id])
  violations    Violation[]

  @@index([uploadedBy])
  @@index([bureau])
  @@map("csv_sources")
}

model Violation {
  id             String        @id @default(uuid())
  pdfFileId      String
  csvSourceId    String
  bureau         Bureau
  severity       Severity
  violationType  ViolationType
  ruleId         String        // e.g., "EXT-001"

  // Coordinates
  x              Float
  y              Float
  width          Float
  height         Float
  page           Int

  // Content
  extractedText  String
  fullText       String?

  // Tracking
  confidence     Float         @default(1.0) // 0-1 confidence score
  detectedAt     DateTime      @default(now())
  verifiedAt     DateTime?
  verifiedBy     String?
  notes          String?

  // Additional data
  metadata       Json?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  pdfFile        PDFFile       @relation(fields: [pdfFileId], references: [id], onDelete: Cascade)
  csvSource      CSVSource     @relation(fields: [csvSourceId], references: [id], onDelete: Cascade)
  verifier       User?         @relation(fields: [verifiedBy], references: [id])

  @@index([pdfFileId])
  @@index([csvSourceId])
  @@index([bureau])
  @@index([severity])
  @@index([violationType])
  @@index([verifiedBy])
  @@map("violations")
}

model SystemConfig {
  id        String   @id @default(uuid())
  key       String   @unique
  value     Json
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_config")
}